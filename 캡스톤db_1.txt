1. 사용자 테이블 ( 사용자의 기본적인 정보 ) 
CREATE TABLE users (
    user_id		INT PRIMARY KEY AUTO_INCREMENT,					-- 유저 고유 아이디
    username	VARCHAR(255) UNIQUE NOT NULL DEFAULT 'You',		-- 유저 이름 ( 빼도되면 빼구..?)
    password	VARCHAR(255) NOT NULL						-- 비밀번호 
);

2. 문제 테이블 ( 문제 유형 및 키워드 기반 문제 정보 )
CREATE TABLE questions (
    question_id	INT PRIMARY KEY AUTO_INCREMENT,
    slide_id		INT NOT NULL,  								-- 어떤 슬라이드에서 출제된 문제인지 연결
    question_type ENUM('객관식', '주관식', '참거짓', '빈칸채우기') NOT NULL,  -- 미리 정해둔 문제 유형
    content		TEXT NOT NULL,  							-- 문제 내용
    answer		TEXT NOT NULL,  							-- 정답
    explanation	TEXT,  									-- 해설 

-- 외래키 설정 
    FOREIGN KEY	(slide_id) 		REFERENCES 	slides(slide_id),
    FOREIGN KEY	(keyword_id) 	REFERENCES 	keywords(keyword_id)
);

3. 키워드 테이블 ( 모든 키워드를 저장하는 키워드, 사용자도 상관없이 문제에서 나온 키워드들 모두 저장 ) 
CREATE TABLE keywords (
    keyword_id		INT PRIMARY KEY AUTO_INCREMENT, 			-- 고유아이디 
    keyword_name 	VARCHAR(255) UNIQUE NOT NULL, 			-- 실제 키워드 명 (예. TCP, IP)
);

4. 사용자 풀이 기록 ( 사용자가 푼 문제를 기록, 정답과 오답 개수 저장 ) 
CREATE TABLE question_attempts (
    attempt_id 		INT PRIMARY KEY AUTO_INCREMENT,			-- 고유 아이디 
    user_id			INT NOT NULL,							-- 유저 아이디
    question_id  		INT NOT NULL,							-- 문제의 고유 아이디
    is_correct   		BOOLEAN NOT NULL,  						-- 정답 여부 
    answer	   		TEXT,									-- 사용자 답변 
    FOREIGN KEY 		(user_id) 	REFERENCES 	users(user_id),
    FOREIGN KEY 		(question_id) REFERENCES 	questions(question_id)
); 

5. 강의자료 테이블 ( 사용자가 업로드한 강의자료) 
CREATE TABLE lecture_materials (
    material_id  		INT 			PRIMARY KEY AUTO_INCREMENT, 	-- 고유 아이디 
    user_id       		INT 			NOT NULL,					-- 유저 아이디
    material_name 	VARCHAR(255) 	UNIQUE NOT NULL, 			-- 강의자료 이름
    progress			FLOAT 		NOT NULL DEFAULT 0,			-- 한 강의자료의 진도율 
    page			INT			NOT NULL, 				-- 강의자료의 전체 페이지 개수 
-- 외래키 설정 
    FOREIGN KEY 		(user_id)	 REFERENCES	users(user_id)
);



6. 슬라이드 테이블 ( 강의자료 슬라이드 및 요약 저장 )
CREATE TABLE slides (
    slide_id      	INT 	PRIMARY KEY AUTO_INCREMENT, 		-- 고유 아이디 
    material_id   	INT 	NOT NULL,  					-- 강의자료와 연결
    slide_number  INT 	NOT NULL,  					-- 슬라이드 번호
    summary       	TEXT 	NOT NULL, 					-- 슬라이드의 요약 내용

-- 외래키 설정 
    FOREIGN KEY (material_id) REFERENCES lecture_materials(material_id)
);


6-1. 문제-키워드 매핑
-- 2) 문제-키워드 매핑
CREATE TABLE question_keywords (
    question_id   	INT 		NOT NULL,
    keyword_id 	INT 		NOT NULL,
    PRIMARY KEY 	(question_id, keyword_id),

-- 외래키 설정 
    FOREIGN KEY 	(question_id)   REFERENCES questions(question_id),
    FOREIGN KEY 	(keyword_id) REFERENCES keywords(keyword_id)
);

7. 약한 키워드 
CREATE TABLE weak_keyword_logs (
   log_id         	INT 			AUTO_INCREMENT PRIMARY KEY,	-- 고유 아이디 
   user_id       	INT 			NOT NULL,					-- 사용자 아이디
   question_id	INT			NOT NULL,					-- 어떤 문제를 풀었는지 
   keyword_id     	INT 			NOT NULL,					-- 키워드 아이디
   is_incorrect   	BOOLEAN 		NOT NULL,       				-- 틀렸으면 TRUE( 정답 = FALSE)
   occurred_at    	TIMESTAMP 	NOT NULL DEFAULT CURRENT_TIMESTAMP,	-- 시간 저장

-- 외래키 설정 
   FOREIGN KEY 	(user_id)    		REFERENCES 	users(user_id),				
   FOREIGN KEY 	(keyword_id) 	REFERENCES 	keywords(keyword_id),
   FOREIGN KEY	(question_id)	REFERENCES	questions(question_id)
);

-- 사용자가 틀릴때마다 INSERT INTO week_keyword_logs(user_id, keyword_id, is_incorrect) VALUES (??, ??, FALSE) 로 저장 
-- 집계 뷰로 오답 횟수 실시간 집계

7-1 약한 키워드 집계 뷰
CREATE VIEW weak_weak_keyword_stats AS	
SELECT
		user_id,
  		keyword_id,
  		COUNT(*) 	AS incorrect_count
FROM 	weak_keyword_logs
WHERE 	is_incorrect = TRUE
GROUP BY 	user_id, keyword_id;

** 특정 키워드에 대해 오답률 조회 쿼리문 
SELECT
  	k.keyword_name,
  	stats.incorrect_count,
  	total.total_count,
  	ROUND(stats.incorrect_count / total.total_count * 100, 2) AS error_rate_percent
FROM (
  	-- 틀린 횟수
  	SELECT 	user_id, keyword_id, COUNT(*) AS incorrect_count
  	FROM 	weak_keyword_logs
  	WHERE 	is_incorrect = TRUE
    	AND 		user_id = ?      	-- 조회할 사용자
    	AND 		keyword_id = ?   -- 조회할 키워드
  	GROUP BY 	user_id, keyword_id
) AS stats
JOIN (
  	-- 전체 시도 횟수
  	SELECT 	user_id, keyword_id, COUNT(*) AS total_count
  	FROM 	weak_keyword_logs
  	WHERE	user_id = ?
    	AND 		keyword_id = ?
  	GROUP BY 	user_id, keyword_id
) AS total
 ON stats.user_id = total.user_id
 AND stats.keyword_id = total.keyword_id
 JOIN keywords AS k
 ON stats.keyword_id = k.keyword_id;


8. 학습 진도 테이블 ( 한 강의자료 내에서 얼마나 진행됐는지 퍼센테이지로 저장, 여기선 실수로 저장) 
CREATE TABLE progress (
    progress_id   	INT			PRIMARY KEY 	AUTO_INCREMENT, 	-- 고유 아이디 
    user_id       	INT 			NOT NULL,  					-- 누가 학습했는지, 사용자 고유 id 
    material_id   	INT 			NOT NULL, 					-- 어떤 학습자료로 했는지, 사용자가 업로드한 강의자료 
    slide_id  	INT	 		NOT NULL,  					-- 강의 자료 내에서 어디 슬라이드까지 진행했는지 저장  
    date    		TIMESTAMP	DEFAULT 		CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,	--  날짜 저장 

-- 왜래키 설정 
    FOREIGN KEY (user_id) 		REFERENCES 	users(user_id),
    FOREIGN KEY (material_id) 	REFERENCES 	lecture_materials(material_id),
    FOREIGN KEY (slide_id) 		REFERENCES 	slides(slide_id)
);


9. 하루 총 학습 시간 
CREATE TABLE daily_study_time (
    study_date   	DATE 	NOT NULL,  	-- 날짜별 학습 시간 저장
    user_id      	INT 		NOT NULL,   
    total_time   	INT 		NOT NULL,  	-- 하루 동안 총 학습 시간(초 단위)

-- 외래키 설정 
    PRIMARY KEY 	(study_date, user_id),  		-- 특정 날짜+사용자로 고유값 설정
    FOREIGN KEY 	(user_id) 	REFERENCES users(user_id)
);

-- 인덱스 활용 -> 더  빠르게 찾기 가능 
-- 1) 약한 키워드 로그 조회/그룹핑용
CREATE INDEX idx_wkl_user_keyword
  ON weak_keyword_logs(user_id, keyword_id);

-- 2) 문제 풀이 기록 조회용
CREATE INDEX idx_qa_user_question
  ON question_attempts(user_id, question_id);

-- 3) 슬라이드 조회용
CREATE INDEX idx_slides_material
  ON slides(material_id);

-- 4) 강의자료 조회용
CREATE INDEX idx_materials_user
  ON lecture_materials(user_id);

-- 5) 문제 테이블에서 슬라이드별 문제 조회용
CREATE INDEX idx_questions_slide
  ON questions(slide_id);






